import { Prisma, User } from '@prisma/client'
import Head from 'next/head'
import Image from 'next/image'
import React, { useState } from 'react'
import prisma from '../lib/prisma'
import { fatcher } from '../utils/fatcher'
import { updateFatcher } from '../utils/updateFatcher'

export async function getServerSideProps() {
  const users: Prisma.UserUncheckedCreateInput[] = await prisma.user.findMany()
  return {
    props: {
      initilaData: users
    }
  }
}
export default function Home({ initilaData }) {


  const [users, setUsers] = useState<Prisma.UserUncheckedCreateInput[]>(initilaData)
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [role, setRole] = useState()
  const [isUpadate, setIsUpadate] = useState(false)
  const [id, setId] = useState();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const body: Prisma.UserUncheckedCreateInput = {
      id,
      name,
      email,
      password,
      role,
    };

    if (isUpadate) {
      updateUser(body)
      return
    }
    const user = fatcher('/api/create', {user: body});
    setUsers([...users, body])
    setName('')
    setEmail('')
    setPassword('')
    setRole(null)

  }

  const updateUser = (body) => { 
    const user = updateFatcher('/api/update/', {user: body});
    setUsers([...users, body])
    setName('')
    setEmail('')
    setPassword('')
    setRole(null)
    setId(null)
  }

  const options = [
    { value: 'ADMIN', label: 'Admin' },
    { value: 'USER', label: 'User' },
  ]

  const handleRoleChange = (e, {value}) => setRole(value)

  const deleteUser = async (data) : Promise<void> => {
    const user = fatcher('/api/delete', {id: data.id})
    setUsers(users.filter(user => user.id !== data.id))
  }

  const editUser = async (data) : Promise<void> => {
    setId(data.id)
    setName(data.name)
    setEmail(data.email)
    setPassword(data.password)
    setRole(data.role)
    setIsUpadate(true)
  }
  
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <form className="w-50 h-screen flex " onSubmit={handleSubmit}>
        <div>
          <label htmlFor="name">Name</label>
          <input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)} />
        </div>
        <div>
          <label htmlFor="email">Email</label>
          <input type="email" id="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        </div>
        <div>
          <label htmlFor="password">Password</label>
          <input type="password" id="password" value={password} onChange={(e) => setPassword(e.target.value)} />
        </div>
        <div>
          <label htmlFor="role">Role</label>
          <select id="role" value={role} onChange={() => handleRoleChange}>
            {options.map(option => (
              <option key={option.value} value={option.value}>{option.label}</option>
            ))}
          </select>
        </div>
        <button type="submit">Submit</button>
      </form>

      <div>
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Password</th>
              <th>Role</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {users.map(user => (
              <tr key={user.id}>
                <td>{user.name}</td>
                <td>{user.email}</td>
                <td>{user.password}</td>
                <td>{user.role}</td>
                <td>
                  <button onClick={() => editUser(user)}>
                    Edit
                  </button>
                  <button onClick={() => deleteUser(user)}>
                    delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
          
        </table>
      </div>
      
      </div>
  )
}
